---
import UltrusLayout from "../../layouts/UltrusLayout.astro";
import {getCFVersions, getMRProject, getMRVersions} from "../../utils/ModHelper";
import {GalleryImage, Version, Mod} from "../../types/mod";
import {marked} from "marked";
import ModNavBar from "../../components/ModNavBar.astro";
export async function getStaticPaths() {
    const mods: Mod[] = await Astro.glob('../../data/mods/*.json');
    return mods.map(mod => ({params: {mod: mod.modrinth + "/versions"}}))
}
const mods: Mod[] = await Astro.glob('../../data/mods/*.json');
let { mod } = Astro.params;
mod = mod.replace("/versions", "");
const modInfo = mods.find(foundMod => foundMod.modrinth === mod);

const modData = await getMRProject(mod);
const gallery: GalleryImage[] = modData.gallery;
gallery.sort((a, b) => a.ordering - b.ordering);

const modrinthVersions: Version[] = await getMRVersions(mod);
const curseforgeVersions: Version[] = await getCFVersions(modInfo.curseforge);

// This interface is used to collect the data from both modrinth and curseforge for display on the page
interface WebpageVersion {
    version: string;
    minecraftVersions: string[];
    filename: string;
    changelog?: string;
    modrinthUrl?: string;
    curseforgeUrl?: string;
    date_published: Number;
}
const versions: WebpageVersion[] = [];

const versionMap: Map<String, WebpageVersion> = new Map();
for (const version of modrinthVersions) {
    const filename = version.files[0].filename;
    const webpageVersion: WebpageVersion = {
        version: version.name,
        minecraftVersions: version.game_versions,
        changelog: version.changelog,
        filename: filename,
        modrinthUrl: `https://modrinth.com/mod/${mod}/version/${version.version_number}`,
        curseforgeUrl: "",
        date_published: Date.parse(version.date_published)
    }
    versionMap.set(filename, webpageVersion);
}
for (const version of curseforgeVersions) {
    const filename = version.files[0].filename;
    if (versionMap.has(filename)) {
        const webpageVersion = versionMap.get(filename);
        let curseforgePubDate = Date.parse(version.date_published);
        if (curseforgePubDate < webpageVersion.date_published) {
            webpageVersion.date_published = curseforgePubDate;
        }
        webpageVersion.curseforgeUrl = `https://www.curseforge.com/minecraft/mc-mods/${modInfo.curseforge}/files/${version.version_number}`;
    } else {
        const webpageVersion: WebpageVersion = {
            version: version.name,
            minecraftVersions: version.game_versions,
            filename: filename,
            changelog: version.changelog,
            modrinthUrl: "",
            curseforgeUrl: `https://www.curseforge.com/minecraft/mc-mods/${modInfo.curseforge}/files/${version.version_number}`,
            date_published: Date.parse(version.date_published)
        }
        versionMap.set(version.name, webpageVersion);
    }
}
// Add each version to the versions array
for (const version of versionMap.values()) {
    versions.push(version);
}
versions.sort((a, b) => b.date_published - a.date_published);
// Gotta have this bc modrinth api returns int
function intColorToHex(color: number): string {
    return "#" + color.toString(16).padStart(6, "0");
}
---
<UltrusLayout title={modData.title} description={modData.description} embed_image={modData.icon_url} embed_color={intColorToHex(modData.color)}>
    <div class="leading-6 mt-3 mx-auto w-5/6 bg-slate-400/10 dark:bg-black/25 min-h-screen p-4">
        <div class="flex flex-row border border-transparent border-b-slate-500 mb-3">
            <img src={modInfo.image} alt={modData.title} class="h-32 w-32"/>
            <div class="ml-5">
                <h1 class="text-4xl font-bold">{modData.title}</h1>
                <p class="text-lg">{modData.description}</p>
            </div>
        </div>
        <ModNavBar
                url={Astro.url.toString().replace("/versions", "")}
                modData={modData}
                key="versions"
        ></ModNavBar>
        <div class="flex flex-col lg:flex-row">
            <div class="lg:inline-block lg:basis-1/5 block">
                <h2 class="text-2xl font-bold">Versions</h2>
                <div class="max-h-screen overflow-y-auto p-1">
                    {
                        versions.map(version => (
                                <button class="bg-white/15 dark:bg-black/25 mt-3 rounded-2xl text-center px-3 py-1.5 mod_version block" data-version={btoa(version.version.replace("+", "-"))} id={"button" + btoa(version.version.replace("+", "-"))}>
                                    {version.version}
                                </button>
                        ))
                    }
                </div>

            </div>
            <div class="lg:inline-block lg:basis-4/5 block text-center align-middle">
                <h2 class="text-2xl font-bold">Version Info</h2>
                {
                    versions.map(version => (
                        <div class={version == versions.values().next().value ? "mt-3 version-info" : "mt-3 hidden version-info"} id={btoa(version.version.replace("+", "-"))}>
                            <h3 class="text-xl font-bold">{version.version}</h3>
                            <p class="text-lg">Minecraft Versions: {version.minecraftVersions.join(", ")}</p>
                            <p class="text-lg">Date Published: {new Date(version.date_published).toLocaleDateString()}</p>
                            <div class="flex justify-center">
                                {
                                    version.modrinthUrl && <a href={version.modrinthUrl} class="btn btn-xs ultrus_btn">Modrinth</a>
                                }
                                {
                                    version.curseforgeUrl && <a href={version.curseforgeUrl} class="btn btn-xs ultrus_btn">Curseforge</a>
                                }
                            </div>
                            <div class="prose max-w-none ">
                                <div set:html={marked.parse(version.changelog)}></div>
                            </div>

                        </div>
                    ))
                }
            </div>
        </div>
    </div>

</UltrusLayout>
<style>
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    .ultrus_btn {
        @apply bg-white border-gray-400 text-gray-800 hover:bg-purple-400;
        @apply dark:bg-gray-800 dark:border-gray-600 dark:text-gray-200 dark:hover:bg-purple-600;
    }
    .selected_version {
        @apply outline outline-purple-500;
    }
</style>
<style is:inline>
    #modcontainer * > img {
        display: inline-block;
        margin: 0;
    }
</style>
<script>
    let currentlySelectedVersion: HTMLElement = document.querySelector(".mod_version");
    if (window.location.search) {
        const urlParams = new URLSearchParams(window.location.search);
        const version = urlParams.get("version");
        currentlySelectedVersion = document.getElementById("button" + btoa(version).replace("+", "-"));
        if (currentlySelectedVersion == null) {
            currentlySelectedVersion = document.querySelector(".mod_version");
        }
    }

    document.querySelectorAll(".mod_version").forEach(version => {
        version.addEventListener("click", onVersionClick);
    });
    toggleVersionInfo(currentlySelectedVersion);
    function onVersionClick(event: Event) {
        const version = event.target;
        toggleVersionInfo(version as HTMLElement);
        const versionName = atob((version as HTMLElement).dataset.version.replace("+", "-"));
        history.pushState({}, "", `?version=${versionName}`);
    }

    function toggleVersionInfo(version: HTMLElement) {
        currentlySelectedVersion.classList.remove("selected_version");
        currentlySelectedVersion = version;
        currentlySelectedVersion.classList.add("selected_version");

        const versionData = document.getElementById((version as HTMLElement).dataset.version.trim());
        document.querySelectorAll(".version-info").forEach(version => {
            version.classList.add("hidden");
        });
        versionData.classList.remove("hidden");
    }

</script>